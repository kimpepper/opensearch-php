<?php

declare(strict_types=1);

/**
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * OpenSearch PHP client
 *
 * @link      https://github.com/opensearch-project/opensearch-php/
 * @copyright Copyright (c) Elasticsearch B.V (https://www.elastic.co)
 * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0
 * @license   https://www.gnu.org/licenses/lgpl-2.1.html GNU Lesser General Public License, Version 2.1
 *
 * Licensed to Elasticsearch B.V under one or more agreements.
 * Elasticsearch B.V licenses this file to you under the Apache 2.0 License or
 * the GNU Lesser General Public License, Version 2.1, at your option.
 * See the LICENSE file in the project root for more information.
 */

namespace OpenSearch;

use OpenSearch\Common\Exceptions\BadMethodCallException;
use OpenSearch\Common\Exceptions\NoNodesAvailableException;
use OpenSearch\Endpoints\AbstractEndpoint;
use OpenSearch\Namespaces\NamespaceBuilderInterface;
use OpenSearch\Namespaces\BooleanRequestWrapper;
:use-namespaces
use OpenSearch\Traits\DeprecatedPropertyTrait;

/**
 * Class Client
 *
 * NOTE: This file is autogenerated using util/GenerateEndpoints.php
 */
class Client
{

    use DeprecatedPropertyTrait;

    const VERSION = '2.3.1';

    /**
     * @var Transport
     */
    public $transport;

    /**
     * @var array
     */
    protected $params;

    protected EndpointFactoryInterface $endpointFactory;

    /**
     * @var callable
     */
    protected $endpoints;

    /**
     * @var NamespaceBuilderInterface[]
     */
    protected $registeredNamespaces = [];

:namespace_properties
    /**
     * Client constructor
     *
     * @param Transport $transport
     * @param callable|EndpointFactoryInterface $endpointFactory
     * @param NamespaceBuilderInterface[] $registeredNamespaces
     */
    public function __construct(Transport $transport, callable|EndpointFactoryInterface $endpointFactory, array $registeredNamespaces)
    {
        $this->transport = $transport;
        if (is_callable($endpointFactory)) {
            @trigger_error('Passing a callable to AbstractNamespace is deprecated in 2.3.2 and will be removed in 3.0.0. Pass an instance of \OpenSearch\EndpointFactoryInterface instead.', E_USER_DEPRECATED);
            $this->endpoints = $endpointFactory;
            $endpointFactory = new LegacyEndpointFactory($endpointFactory);
        }
        $this->endpointFactory = $endpointFactory;
:new-namespaces
        $this->registeredNamespaces = $registeredNamespaces;
    }
:endpoints
:functions

    /**
     * Checks for access to deprecated properties.
     */
    public function __get(string $name): mixed
    {
        if ($name === 'endpoints') {
            @trigger_error('The $callable property is deprecated in 2.3.2 and will be removed in 3.0.0. Use $endpointFactory instead.', E_USER_DEPRECATED);
            return $this->endpoints;
        }
        return null;
    }

    /**
     * Catchall for registered namespaces
     *
     * @return object
     * @throws BadMethodCallException if the namespace cannot be found
     */
    public function __call(string $name, array $arguments)
    {
        if (isset($this->registeredNamespaces[$name])) {
            return $this->registeredNamespaces[$name];
        }
        throw new BadMethodCallException("Namespace [$name] not found");
    }

    /**
     * Extract an argument from the array of parameters
     *
     * @return null|mixed
     */
    public function extractArgument(array &$params, string $arg)
    {
        if (array_key_exists($arg, $params) === true) {
            $value = $params[$arg];
            $value = (is_object($value) && !is_iterable($value)) ?
                (array) $value :
                $value;
            unset($params[$arg]);
            return $value;
        } else {
            return null;
        }
    }

    /**
     * Sends a raw request to the cluster
     * @return callable|array
     * @throws NoNodesAvailableException
     */
    public function request(string $method, string $uri, array $attributes = [])
    {
        $params = $attributes['params'] ?? [];
        $body = $attributes['body'] ?? null;
        $options = $attributes['options'] ?? [];

        $promise = $this->transport->performRequest($method, $uri, $params, $body, $options);

        return $this->transport->resultOrFuture($promise, $options);
    }

    /**
     * @return callable|array
     */
    private function performRequest(AbstractEndpoint $endpoint)
    {
        $promise =  $this->transport->performRequest(
            $endpoint->getMethod(),
            $endpoint->getURI(),
            $endpoint->getParams(),
            $endpoint->getBody(),
            $endpoint->getOptions()
        );

        return $this->transport->resultOrFuture($promise, $endpoint->getOptions());
    }
}
